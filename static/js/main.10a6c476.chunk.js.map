{"version":3,"sources":["store/loading.ts","store/posts.ts","store/filter.ts","store/index.ts","store/loaded.ts","store/error.ts","helpers/api.ts","components/Start.tsx","components/Comment.tsx","components/CommentList.tsx","components/User.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["loadingReducer","loading","action","type","setPosts","posts","setFilter","query","rootReducer","combineReducers","filter","post","id","value","loaded","error","getLoading","state","getLoaded","getPosts","getFilter","store","createStore","composeWithDevTools","applyMiddleware","thunk","getAllData","url","fetch","then","response","json","getPostsFromServer","a","Promise","all","postFromServer","usersFromServer","commentsFromServer","map","user","find","userId","comments","comment","postId","Start","dispatch","useDispatch","useSelector","preparedPosts","className","onClick","disabled","Comment","name","body","href","email","CommentList","review","key","User","address","street","suite","city","zipcode","Post","title","setDeletePost","PostList","visiblePosts","useMemo","allPosts","searchQuery","pattern","RegExp","test","getVisiblePosts","setFilterQueryWithDebounce","useCallback","debounce","htmlFor","placeholder","onChange","event","target","App","isLoaded","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.10a6c476.chunk.js","sourcesContent":["import { AnyAction } from 'redux';\n\nconst START_LOADING = 'START_LOADING';\nconst FINISH_LOADING = 'FINISH_LOADING';\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n\nconst loadingReducer = (loading = false, action: AnyAction) => {\n  switch (action.type) {\n    case START_LOADING:\n      return true;\n\n    case FINISH_LOADING:\n      return false;\n\n    default:\n      return loading;\n  }\n};\n\nexport default loadingReducer;\n","import { AnyAction } from 'redux';\n\nconst SET_POSTS = 'SET_POSTS';\nconst DELETE_POST = 'DELETE_POST';\n\nexport const setPosts = (posts: PostType[]) => ({ type: SET_POSTS, posts });\nexport const setDeletePost = (id: number) => ({ type: DELETE_POST, id });\n\nexport const postsReducer = (posts: PostType[] = [], action: AnyAction): PostType[] => {\n  switch (action.type) {\n    case SET_POSTS:\n      return action.posts;\n    case DELETE_POST:\n      return posts.filter(post => post.id !== action.value);\n    default:\n      return posts;\n  }\n};\n","import { AnyAction } from 'redux';\n\nconst FILTER = 'FILTER';\n\nexport const setFilter = (query: string) => ({\n  type: FILTER,\n  query,\n});\n\nexport const filterReducer = (query = '', action: AnyAction) => {\n  switch (action.type) {\n    case FILTER:\n      return action.query;\n    default:\n      return query;\n  }\n};\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport loadingReducer from './loading';\nimport { loadedReducer } from './loaded';\nimport { postsReducer } from './posts';\nimport { filterReducer } from './filter';\nimport { errorReducer } from './error';\n\nconst rootReducer = combineReducers({\n  posts: postsReducer,\n  loading: loadingReducer,\n  loaded: loadedReducer,\n  filter: filterReducer,\n  error: errorReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport const getLoading = (state: RootState) => state.loading;\nexport const getLoaded = (state: RootState) => state.loaded;\nexport const getPosts = (state: RootState) => state.posts;\nexport const getFilter = (state: RootState) => state.filter;\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(applyMiddleware(thunk)),\n);\n\nexport default store;\n","import { AnyAction } from 'redux';\n\nconst LOADED = 'LOADED';\n\nexport const setLoaded = () => ({ type: LOADED });\n\nexport const loadedReducer = (loaded = false, action: AnyAction) => {\n  switch (action.type) {\n    case LOADED:\n      return true;\n    default:\n      return loaded;\n  }\n};\n","import { AnyAction } from 'redux';\n\nconst IS_ERROR = 'IS_ERROR';\n\nexport const setError = () => ({ type: IS_ERROR });\n\nexport const errorReducer = (error = false, action: AnyAction) => {\n  switch (action.type) {\n    case IS_ERROR:\n      return true;\n    default:\n      return error;\n  }\n};\n","export function fetchMessage(): Promise<string> {\n  // this is just a fake promise resolved in 2 seconds\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve('Message from server');\n    }, 2000);\n  });\n}\n\nconst API_URL = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api';\n\nconst getAllData = <T>(url: string): Promise<T[]> => {\n  return fetch(API_URL + url)\n    .then(response => response.json());\n};\n\nconst posts = () => getAllData<PostType>('/posts.json');\nconst users = () => getAllData<UserType>('/users.json');\nconst comments = () => getAllData<CommentType>('/comments.json');\n\nexport const getPostsFromServer = async (): Promise<PostType[]> => {\n  const [\n    postFromServer,\n    usersFromServer,\n    commentsFromServer,\n  ] = await Promise.all([posts(), users(), comments()]);\n\n  return postFromServer.map(post => ({\n    ...post,\n    user: usersFromServer.find(user => user.id === post.userId) as UserType,\n    comments: commentsFromServer.filter(comment => comment.postId === post.id),\n  }));\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { getLoading } from '../store';\nimport { finishLoading, startLoading } from '../store/loading';\nimport { getPostsFromServer } from '../helpers/api';\nimport { setError } from '../store/error';\nimport { setLoaded } from '../store/loaded';\nimport { setPosts } from '../store/posts';\n\n\nexport const Start = () => {\n  const dispatch = useDispatch();\n  const loading = useSelector(getLoading);\n\n  async function handleLoadClick() {\n    dispatch(startLoading());\n\n    try {\n      const preparedPosts = await getPostsFromServer();\n\n      dispatch(setPosts(preparedPosts));\n    } catch (error) {\n      dispatch(setError());\n    } finally {\n      dispatch(finishLoading());\n      dispatch(setLoaded());\n    }\n  }\n\n  return (\n    <>\n      <button\n        type=\"button\"\n        className=\"loading__btn\"\n        onClick={handleLoadClick}\n        disabled={loading}\n      >\n        {loading ? 'Loading...' : 'Load'}\n      </button>\n      <div>\n        {loading && <span className=\"error\">Loading error, please try again later</span>}\n      </div>\n    </>\n  );\n};\n","import React from 'react';\n\ntype Props = {\n  comment: CommentType;\n};\n\nexport const Comment: React.FC<Props> = ({ comment }) => (\n  <li className=\"comment__item comment\">\n    <h5 className=\"comment__name\">{comment.name}</h5>\n    <p className=\"comment__body\">{comment.body}</p>\n    <p>\n      <a href={`mailto:${comment.email}`} className=\"comment__email\">\n        {comment.email}\n      </a>\n    </p>\n  </li>\n);\n","import React from 'react';\nimport { Comment } from './Comment';\n\ntype Props = {\n  comments: CommentType[];\n};\n\nexport const CommentList: React.FC<Props> = ({ comments }) => (\n  <>\n    <ul className=\"comments\">\n      {comments.map(review => (\n        <Comment\n          key={review.id}\n          comment={review}\n        />\n      ))}\n    </ul>\n  </>\n);\n","import React from 'react';\n\ntype Props = {\n  user: UserType;\n};\n\nexport const User: React.FC<Props> = ({ user }) => (\n  <div className=\"author\">\n    <div className=\"author__info\">\n      <p className=\"author__name\">{user.name}</p>\n      <p>\n        <a href={`mailto:${user.email}`} className=\"author__email\">\n          {user.email}\n        </a>\n      </p>\n    </div>\n\n    <div className=\"author_address\">\n      <p>\n        <b>Street:</b>\n        {' '}\n        <i>{user.address.street}</i>\n      </p>\n      <p>\n        <b>Suite:</b>\n        {' '}\n        <i>{user.address.suite}</i>\n      </p>\n      <p>\n        <b>City:</b>\n        {' '}\n        <i>{user.address.city}</i>\n      </p>\n      <p>\n        <b>Zipcode:</b>\n        {' '}\n        <i>{user.address.zipcode}</i>\n      </p>\n    </div>\n  </div>\n);\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { CommentList } from './CommentList';\nimport { User } from './User';\n\nimport { setDeletePost } from '../store/posts';\n\ntype Props = {\n  post: PostType;\n};\n\nexport const Post: React.FC<Props> = ({ post }) => {\n  const dispatch = useDispatch();\n\n  const deleteSelectedPost = (id: number) => {\n    dispatch(setDeletePost(id));\n  };\n\n  return (\n    <li className=\"post__item\">\n      <div className=\"post__article\">\n        <h3 className=\"post__title\">\n          {post.title}\n        </h3>\n        <button\n          type=\"button\"\n          className=\"post__delete-button\"\n          onClick={() => deleteSelectedPost(post.id)}\n        >\n          Delete\n        </button>\n        <p className=\"post__text\">\n          {post.body}\n        </p>\n      </div>\n      <User user={post.user} />\n      <hr />\n      <h3>Comments:</h3>\n      <CommentList comments={post.comments} />\n    </li>\n  );\n};\n","import React, { useMemo, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport debounce from 'lodash/debounce';\nimport { Post } from './Post';\n\nimport { getPosts, getFilter } from '../store';\nimport { setFilter } from '../store/filter';\n\ninterface Props {\n  posts: PostType[];\n}\n\nexport const PostList: React.FC<Props> = () => {\n  const dispatch = useDispatch();\n  const posts = useSelector(getPosts);\n  const query = useSelector(getFilter);\n\n\n  const getVisiblePosts = (allPosts: PostType[], searchQuery: string) => {\n    const pattern = new RegExp(searchQuery, 'i');\n\n    return allPosts\n      .filter(({ body, title }) => pattern.test(body + title));\n  };\n\n  const visiblePosts = useMemo(\n    () => getVisiblePosts(posts, query),\n\n    [query, posts],\n);\n\n  const setFilterQueryWithDebounce = useCallback(\n    debounce(setFilter, 500),\n    [],\n  );\n\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const { value } = event.target;\n\n    dispatch(setFilter(value));\n    setFilterQueryWithDebounce(value);\n  };\n\n  return (\n    <>\n      <div className=\"wrapper\">\n        <h3 className=\"search-title\">Search for posts:</h3>\n        <label htmlFor=\"search\">\n          <input\n            id=\"search\"\n            type=\"text\"\n            className=\"validate\"\n            placeholder=\"Type something to search post...\"\n            value={query}\n            onChange={handleChange}\n          />\n        </label>\n      </div>\n      <ul className=\"post post__list\">\n        {visiblePosts.map((post => (\n          <Post key={post.id} post={post} />\n        )))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { useSelector } from 'react-redux';\n\nimport './App.scss';\nimport { Start } from './components/Start';\nimport { PostList } from './components/PostList';\n\nimport { getPosts, getLoaded } from './store';\n\nconst App = () => {\n  const posts = useSelector(getPosts);\n  const isLoaded = useSelector(getLoaded);\n\n  return (\n    <div className=\"app__header\">\n      <h1 className=\"heading\">Dynamic list of posts</h1>\n      {!isLoaded\n        ? (\n          <Start />\n        )\n        : (\n          <PostList posts={posts} />\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { BrowserRouter } from 'react-router-dom';\r\n\r\nimport App from './App';\r\nimport store from './store';\r\n\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App />\r\n    </BrowserRouter>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}